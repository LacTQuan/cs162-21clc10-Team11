/*
Student_Course* Copy_Student_Cour(Student* student){
    Student_Course* Student_Cour = new Student_Course;
    Student_Cour->No = student->No;
    Student_Cour->StudentID = student->StudentID;
    Student_Cour->FirstName = student->FirstName;
    Student_Cour->LastName = student->LastName;
    Student_Cour->Gender = student->Gender;
    Student_Cour->Date_of_Birth = student->Date_of_Birth;
    Student_Cour->SocialID = student->SocialID;
    return Student_Cour;
}
/*
struct Student_Course{
    string No, StudentID, FirstName, LastName, Gender, Date_of_Birth, SocialID;
    Student_Course* pNext_Student_Course;
    Student* pStudent;
};
struct Course{
    //Course id, Course name, teacher name, number of credits, 
    //the maximum number of students (default 50), day, and the session
    string CourseID, Course_Name, Teacher_Name, Number_of_Credits, Max_Student, Day1, Session1, Day2, Session2;
    string Start_Day, End_Day;
    Course* pNext_Course;
    Student_Course* pStudent_Course;
};
struct Cur_Course{ //new
    string CourseID, Course_Name, Teacher_Name, Number_of_Credits, Max_Student, Day1, Session1, Day2, Session2;
    string Start_Day, End_Day;
    Mark mark;      
    Cur_Course* pNext_Cur_Cour;
    //Temp_Course* pTemp_Cour;
};
struct Student{
    //No, StudentID, FirstName, LastName, Gender, Date_of_Birth, SocialID
    string No, StudentID, FirstName, LastName, Gender, Date_of_Birth, SocialID;
    Student* pNext_Student;
    Cur_Course* pCur_Cour;
};
void View_Enrolled_Course(Student* student) {
    Cur_Course* pCur_Cour = new Cur_Course;
    if (student->pCur_Cour == NULL) {
        cout << "You haven't enrolled any courses yet!" << endl;
    }
    else {
        Cur_Course* pEnroll = student->pCur_Cour;
        cout << "Courses have been enrolled: ";
        while (pEnroll != NULL) {
            cout << pEnroll->Course_Name << " | ";
            pEnroll = pEnroll->pNext_Cur_Cour;
        }
    }
}
void Delete_Enrolled_Course(Student*& student, Course*& course) {
    Cur_Course* pCur1 = student->pCur_Cour;
    Student_Course* pCur2 = course->pStudent_Course;
    while (student->pCur_Cour == NULL || course->pStudent_Course == NULL) {
        cout << "You haven't enrolled this course yet!";
        cin.ignore();
        getchar();
        return;
    }
    if (pCur1->Course_Name == course->Course_Name) {
        Cur_Course* pTemp1 = pCur1;
        pCur1 = pCur1->pNext_Cur_Cour;
        student->pCur_Cour = pCur1;
        delete pTemp1;
    }
    else {
        Cur_Course* pTemp1 = pCur1;
        while (pTemp1->pNext_Cur_Cour->Course_Name != course->Course_Name) {
            pTemp1 = pTemp1->pNext_Cur_Cour;
        }
        Cur_Course* pDel1 = pTemp1->pNext_Cur_Cour;
        pTemp1->pNext_Cur_Cour = pTemp1->pNext_Cur_Cour->pNext_Cur_Cour;
        delete pDel1;
    }
    if (pCur2->StudentID == student->StudentID) {
        Student_Course* pTemp2 = pCur2;
        pCur2 = pCur2->pNext_Student_Course;
        course->pStudent_Course = pCur2;
        delete pTemp2;
    }
    else {
        Student_Course* pTemp2 = pCur2;
        while (pTemp2->pNext_Student_Course->StudentID != student->StudentID) {
            pTemp2 = pTemp2->pNext_Student_Course;
        }
        Student_Course* pDel2 = pTemp2->pNext_Student_Course;
        pTemp2->pNext_Student_Course = pTemp2->pNext_Student_Course->pNext_Student_Course;
        delete pDel2;
    }
}

// find student
Student* find_student_in_1_class(Class* classes, string Student_ID) {
    if (classes->pStudent == NULL) return NULL;
    Student* pCur_Student = classes->pStudent;

    while (pCur_Student != NULL && pCur_Student->StudentID != Student_ID)
        pCur_Student = pCur_Student->pNext_Student;

    if (pCur_Student != NULL) return pCur_Student;
    return NULL;
}
Student* find_student_in_many_classes(Year* year, string Student_ID) {
    if (year->pClass == NULL) return NULL;
    Class* pCur_Class = year->pClass;

    while (pCur_Class != NULL) {
        Student* temp = find_student_in_1_class(pCur_Class, Student_ID);
        if (temp != NULL) return temp;
        pCur_Class = pCur_Class->pNext_Class;
    }
    return NULL;
}
//find course
Course* find_course_in_many_subjects(Semester* semester, string course) {
    if (semester->pCourse == NULL) return NULL;
    Course* pCur_Course = semester->pCourse;

    while (pCur_Course != NULL) {
        if (pCur_Course->Course_Name == course) return pCur_Course;
        pCur_Course = pCur_Course->pNext_Course;
    }
    return NULL;
}
//enroll main
void enroll_main(Year*& year, Semester*& semester) {
    string studentID;
    cout << "StudentID: "; cin >> studentID;

    Student* student = find_student_in_many_classes(year, studentID);
    if (student == NULL) {
        cout << "invalid student" << endl;
        cin.ignore();
        getchar();
        return;
    }
    //view all course
    string course_name;
    cout << "Course you want to choose "; cin >> course_name;
    Course* course_regis = find_course_in_many_subjects(semester, course_name);
    if (course_regis == NULL) {
        cout << "invalid course_register" << endl;
        cin.ignore();
        getchar();
        return;
    }

    Enroll_Course(course_regis, student);
}
void View_Enrolled_Course_main(Year*& year, Semester*& semester) {
    string studentID;
    cout << "Your student ID: ";
    cin >> studentID;
    Student* student = find_student_in_many_classes(year, studentID);
    if (student == NULL) {
        cout << "Student ID not found!" << endl;
        cin.ignore();
        getchar();
        return;
    }
    View_Enrolled_Course(student);
    cin.ignore();
    getchar();
}
void Delete_Enrolled_Course_main(Year*& year, Semester*& semester) {
    string studentID;
    cout << "Your studentID: ";
    cin >> studentID;
    Student* student = find_student_in_many_classes(year, studentID);
    if (student == NULL) {
        cout << "Student ID not found!" << endl;
        cin.ignore();
        getchar();
        return;
    }
    //view all course
    //View_Enrolled_Course(student);
    string course_name;
    cout << "Course you want to delete: ";
    cin >> course_name;
    Course* Del_Cour = find_course_in_many_subjects(semester, course_name);
    if (Del_Cour == NULL) {
        cout << "Course name not found!" << endl;
        cin.ignore();
        getchar();
        return;
    }
    Delete_Enrolled_Course(student, Del_Cour);
}
