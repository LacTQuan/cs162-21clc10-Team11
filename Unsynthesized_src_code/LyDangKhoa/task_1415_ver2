/*
Student_Course* Copy_Student_Cour(Student* student){
    Student_Course* Student_Cour = new Student_Course;
    Student_Cour->No = student->No;
    Student_Cour->StudentID = student->StudentID;
    Student_Cour->FirstName = student->FirstName;
    Student_Cour->LastName = student->LastName;
    Student_Cour->Gender = student->Gender;
    Student_Cour->Date_of_Birth = student->Date_of_Birth;
    Student_Cour->SocialID = student->SocialID;
    return Student_Cour;
}
/*
struct Student_Course{
    string No, StudentID, FirstName, LastName, Gender, Date_of_Birth, SocialID;
    Student_Course* pNext_Student_Course;
    Student* pStudent;
};
struct Course{
    //Course id, Course name, teacher name, number of credits, 
    //the maximum number of students (default 50), day, and the session
    string CourseID, Course_Name, Teacher_Name, Number_of_Credits, Max_Student, Day1, Session1, Day2, Session2;
    string Start_Day, End_Day;
    Course* pNext_Course;
    Student_Course* pStudent_Course;
};
struct Cur_Course{ //new
    string CourseID, Course_Name, Teacher_Name, Number_of_Credits, Max_Student, Day1, Session1, Day2, Session2;
    string Start_Day, End_Day;
    Mark mark;      
    Cur_Course* pNext_Cur_Cour;
    //Temp_Course* pTemp_Cour;
};
struct Student{
    //No, StudentID, FirstName, LastName, Gender, Date_of_Birth, SocialID
    string No, StudentID, FirstName, LastName, Gender, Date_of_Birth, SocialID;
    Student* pNext_Student;
    Cur_Course* pCur_Cour;
};
void View_Enrolled_Course(Student* student){
    Cur_Course* pCur_Cour = new Cur_Course;
    if(student->pCur_Cour == NULL){
        cout << "You haven't enrolled any courses yet!" << endl;
    }
    else{
        Cur_Course* pEnroll = student->pCur_Cour;
        cout << "Courses have been enrolled: ";
        while(pEnroll != NULL){
            cout << pEnroll->Course_Name << " | ";
            pEnroll = pEnroll->pNext_Cur_Cour;
        }
    }
}
Student* find_student_in_many_classes(Year* year, string Student_ID){
    if(year->pClass == NULL) return NULL;
    Class* pCur_Class = year->pClass;

    while(pCur_Class != NULL){
        Student* temp = find_student_in_1_class(pCur_Class,Student_ID);
        if(temp != NULL) return temp;
        pCur_Class = pCur_Class->pNext_Class;
    }
    return NULL;
}
void View_Enrolled_Course_main(Year*& year, Semester*& semester){
    string studentID;
    cout << "Your student ID: ";
    cin >> studentID;
    Student* student = find_student_in_many_classes(year, studentID);
    if(student == NULL){
        cout << "Student ID not found!" << endl;
        cin.ignore();
        getchar();
        return;
    }
    View_Enrolled_Course(student);
    cin.ignore();
    getchar();
}
void Delete_Enrolled_Course(Student* student, string enroll_course){
    cout << "Enter the courseID you want to delete; ";
    getline(cin, enroll_course);
    Student* pDel = student.pCur_Cour;
    // Neu pDel = NULL thi danh sach rong
    if(pDel == NULL){
        cout << "You haven't enrolled any courses!" << endl;
    }
    else{
        Student* pPrev = NULL;
        // Dung vong lap de tim ra pDel va pPrev
        while(pDel != NULL){
            if(pDel->CourseID == enroll_course){
                break;
            }
            pPrev = pDel;
            pDel = pDel->pNext_Cur_Cour;
        }
        if (pDel == NULL){
            cout << "Cannot find the course you want to delete!";
        }
        else{
            // xoa dau danh sach
            if(pDel == student.pCur_Cour){
                student.pCur_Cour = student.pCur_Cour->pNext_Cur_Cour;
                pDel->pNext_Cur_Cour = NULL;
                delete pDel;
                pDel = NULL;
            }
            else{
                pPre->pNext_Cur_Cour = pDel->pNext_Cur_Cour;
                pDel->pNext_Cur_Cour = NULL;
                delete pDel;
                pDel = NULL;
            }
        }
    }
}
void Delete_Enrolled_Course_main(Year* &year, Semester* &semester){
    string studentID;
    cout<<"Your studentID: "; 
    cin>>studentID;
    Student* student = find_student_in_many_classes(year, studentID);
    if(student == NULL){
        cout<<"Student ID not found!" << endl;
        cin.ignore();
        getchar();
        return;
    }
    //View_Enrolled_Course(student);
    else{
        string course_name;
        cout << "Course you want to delete: "; 
        cin>>course_name;
        Course* Del_Cour = find_course_in_many_subjects(semester,course_name);
        if(Del_Cour == NULL){
            cout<<"Course name not found!" << endl;
            cin.ignore();
            getchar();
            return;
        }
        cout<<"You have deleted course: " << Del_Cour->Course_Name << endl;

        Delete_Enrolled_Course(student,Del_Cour);
    }
}
